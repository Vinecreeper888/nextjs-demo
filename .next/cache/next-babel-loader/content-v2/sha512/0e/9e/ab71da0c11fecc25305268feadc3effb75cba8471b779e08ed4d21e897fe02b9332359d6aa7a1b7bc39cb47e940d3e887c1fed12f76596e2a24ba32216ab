{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/siddhanth/Desktop/Development/React projects/React topic demos/NextJS/nextjs-project/pages/[meetUpId]/index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails() {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\n    title: \"First Meetup\",\n    address: \"Some street 5, Some City\",\n    description: \"The meetup description\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  //with gstp, page is pre-generated during build\n  //this means, nextJS needs to pre-generate all versions in advance\n  //since its dynamic.\n  //we need to pre-generate the ids for all versions. For this, we need\n  //to add getStaticPaths() which ahs the job of returning an object which\n  //describes the dynamic segment values so all the meetupId for which\n  //the page should be pre=generated for that version\n  //It has a path key: which contains all the path details which is an array\n  //this has a aparama key, which is an object, which can have multiple keys\n  //and object and here we can add the meetupId for whcih the page must be\n  //pre-generated\n  //it hneeds to have fallback key -> this tells the nextJS whether\n  //your paths array cpntans all supported parameter values or someo fthem\n  //if fallback is false, it means it suports all parameter values\n  //if its true, nextJS would try to dynamically generated the html pages\n  //on the eserver for the incoming request\n  //for pages which are requested more frequenyly for more efficiency\n  return {\n    fallback: false,\n    paths: [{\n      params: {\n        meetUpId: \"m1\"\n      }\n    }, {\n      params: {\n        meetUpId: \"m2\"\n      }\n    }]\n  };\n}\nexport async function getStaticProps(context) {\n  //fetch data for a single meetup\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: {\n        image: \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\n        title: \"First Meetup\",\n        address: \"Some street 5, Some City\",\n        description: \"The meetup description\"\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/siddhanth/Desktop/Development/React projects/React topic demos/NextJS/nextjs-project/pages/[meetUpId]/index.js"],"names":["MeetupDetail","MeetupDetails","getStaticPaths","fallback","paths","params","meetUpId","getStaticProps","context","meetupId","console","log","props","meetupData","image","title","address","description"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,GAAyB;AACvB,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAC,gFADR;AAEE,IAAA,KAAK,EAAC,cAFR;AAGE,IAAA,OAAO,EAAC,0BAHV;AAIE,IAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ;AADV,KADK,EAML;AACED,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ;AADV,KANK;AAFF,GAAP;AAeD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AAEA,QAAMC,QAAQ,GAAGD,OAAO,CAACH,MAAR,CAAeI,QAAhC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA,SAAO;AACLG,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACVC,QAAAA,KAAK,EACH,gFAFQ;AAGVC,QAAAA,KAAK,EAAE,cAHG;AAIVC,QAAAA,OAAO,EAAE,0BAJC;AAKVC,QAAAA,WAAW,EAAE;AALH;AADP;AADF,GAAP;AAWD;AAED,eAAehB,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails() {\n  return (\n    <MeetupDetail\n      image=\"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\"\n      title=\"First Meetup\"\n      address=\"Some street 5, Some City\"\n      description=\"The meetup description\"\n    />\n  );\n}\n\nexport async function getStaticPaths() {\n  //with gstp, page is pre-generated during build\n  //this means, nextJS needs to pre-generate all versions in advance\n  //since its dynamic.\n  //we need to pre-generate the ids for all versions. For this, we need\n  //to add getStaticPaths() which ahs the job of returning an object which\n  //describes the dynamic segment values so all the meetupId for which\n  //the page should be pre=generated for that version\n  //It has a path key: which contains all the path details which is an array\n  //this has a aparama key, which is an object, which can have multiple keys\n  //and object and here we can add the meetupId for whcih the page must be\n  //pre-generated\n\n  //it hneeds to have fallback key -> this tells the nextJS whether\n  //your paths array cpntans all supported parameter values or someo fthem\n  //if fallback is false, it means it suports all parameter values\n  //if its true, nextJS would try to dynamically generated the html pages\n  //on the eserver for the incoming request\n  //for pages which are requested more frequenyly for more efficiency\n\n  return {\n    fallback: false,\n    paths: [\n      {\n        params: {\n          meetUpId: \"m1\",\n        },\n      },\n      {\n        params: {\n          meetUpId: \"m2\",\n        },\n      },\n    ],\n  };\n}\n\nexport async function getStaticProps(context) {\n  //fetch data for a single meetup\n\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n\n  return {\n    props: {\n      meetupData: {\n        image:\n          \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\n        title: \"First Meetup\",\n        address: \"Some street 5, Some City\",\n        description: \"The meetup description\",\n      },\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}