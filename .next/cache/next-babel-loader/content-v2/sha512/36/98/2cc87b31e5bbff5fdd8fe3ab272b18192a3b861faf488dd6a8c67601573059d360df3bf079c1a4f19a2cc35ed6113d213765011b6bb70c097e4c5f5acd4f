{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/siddhanth/Desktop/Development/React projects/React topic demos/NextJS/nextjs-project/pages/index.js\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nconst DUMMY_MEETUPS = [{\n  id: \"m1\",\n  title: \"A first meetup\",\n  image: \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\n  address: \"Some address 5, 12345 Some City\",\n  dsecription: \"This is the first meetup\"\n}, {\n  id: \"m2\",\n  title: \"A second meetup\",\n  image: \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\n  address: \"Some address 5, 123456789-047574365348 Some City\",\n  dsecription: \"This is the second meetup\"\n}];\n\nfunction HomePage(props) {\n  //const [loadedMeetups, setLoadedMeetups] = useState([]);\n  // useEffect(() => {\n  //     //send http request\n  //     setLoadedMeetups(DUMMY_MEETUPS);\n  // },[]);\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getServerSideProps(context) {\n  const req = context.req;\n  const res = context.res; //will not run during build, but always on the server after deployment\n\n  return {\n    props: {\n      meetups: DUMMY_MEETUPS\n    }\n  };\n} // export async function getStaticProps(context) {\n//     const req = context.req;\n//     const res = context.res;    \n//     //always on the server, never on the client\n//     return {\n//         props: {\n//             meetups: DUMMY_MEETUPS\n//         },\n//         revalidate: 1\n//     };\n// }\n\nexport default HomePage; //useEffect works such a way that it executes after the component function executes\n//the array will be empty and then the useEffect executs which then sets the array\n//which then rerenders the component\n//why?\n//if it fetched from backend, users might see a loadingSPinner which may not be the\n//UI exp we wanted. Here the component is rendered twice which impacts the performance\n//nextJs does not wait for the data to be fetched to then return the\n//fully rendered page. It returns the first compoennt render cycle which could be \n//an empty page.\n//PAGE PRE-RENDERING","map":{"version":3,"sources":["/Users/siddhanth/Desktop/Development/React projects/React topic demos/NextJS/nextjs-project/pages/index.js"],"names":["MeetupList","DUMMY_MEETUPS","id","title","image","address","dsecription","HomePage","props","meetups","getServerSideProps","context","req","res"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,kCAAvB;AAEA,MAAMC,aAAa,GAAG,CAClB;AACIC,EAAAA,EAAE,EAAE,IADR;AAEIC,EAAAA,KAAK,EAAE,gBAFX;AAGIC,EAAAA,KAAK,EAAE,gFAHX;AAIIC,EAAAA,OAAO,EAAE,iCAJb;AAKIC,EAAAA,WAAW,EAAE;AALjB,CADkB,EAQlB;AACIJ,EAAAA,EAAE,EAAE,IADR;AAEIC,EAAAA,KAAK,EAAE,iBAFX;AAGIC,EAAAA,KAAK,EAAE,gFAHX;AAIIC,EAAAA,OAAO,EAAE,kDAJb;AAKIC,EAAAA,WAAW,EAAE;AALjB,CARkB,CAAtB;;AAiBA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB;AACA;AACA;AACA;AACA;AAEA,sBACI,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;AAGD,OAAO,eAAeC,kBAAf,CAAkCC,OAAlC,EAA2C;AAC9C,QAAMC,GAAG,GAAGD,OAAO,CAACC,GAApB;AACA,QAAMC,GAAG,GAAGF,OAAO,CAACE,GAApB,CAF8C,CAK9C;;AACA,SAAO;AACHL,IAAAA,KAAK,EAAE;AACHC,MAAAA,OAAO,EAAER;AADN;AADJ,GAAP;AAKH,C,CAGD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeM,QAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["import MeetupList from \"../components/meetups/MeetupList\";\n\nconst DUMMY_MEETUPS = [\n    {\n        id: \"m1\",\n        title: \"A first meetup\",\n        image: \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\n        address: \"Some address 5, 12345 Some City\",\n        dsecription: \"This is the first meetup\"\n    },\n    {\n        id: \"m2\",\n        title: \"A second meetup\",\n        image: \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\n        address: \"Some address 5, 123456789-047574365348 Some City\",\n        dsecription: \"This is the second meetup\"\n    }\n];\n\nfunction HomePage(props) {\n    //const [loadedMeetups, setLoadedMeetups] = useState([]);\n    // useEffect(() => {\n    //     //send http request\n    //     setLoadedMeetups(DUMMY_MEETUPS);\n    // },[]);\n\n    return(\n        <MeetupList meetups={props.meetups}/>\n    );\n}\n\n\nexport async function getServerSideProps(context) {\n    const req = context.req;\n    const res = context.res;\n\n\n    //will not run during build, but always on the server after deployment\n    return {\n        props: {\n            meetups: DUMMY_MEETUPS\n        }\n    } \n}\n\n\n// export async function getStaticProps(context) {\n//     const req = context.req;\n//     const res = context.res;    \n\n//     //always on the server, never on the client\n//     return {\n//         props: {\n//             meetups: DUMMY_MEETUPS\n//         },\n//         revalidate: 1\n//     };\n// }\n\nexport default HomePage;\n\n//useEffect works such a way that it executes after the component function executes\n//the array will be empty and then the useEffect executs which then sets the array\n//which then rerenders the component\n\n//why?\n//if it fetched from backend, users might see a loadingSPinner which may not be the\n//UI exp we wanted. Here the component is rendered twice which impacts the performance\n\n//nextJs does not wait for the data to be fetched to then return the\n//fully rendered page. It returns the first compoennt render cycle which could be \n//an empty page.\n\n//PAGE PRE-RENDERING\n"]},"metadata":{},"sourceType":"module"}