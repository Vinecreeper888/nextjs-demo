{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/siddhanth/Desktop/Development/React projects/React topic demos/NextJS/nextjs-project/pages/index.js\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport { MongoClient } from \"mongodb\";\nimport Head from \"next/head\";\nimport React from \"react\"; // const DUMMY_MEETUPS = [\n//     {\n//         id: \"m1\",\n//         title: \"A first meetup\",\n//         image: \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\n//         address: \"Some address 5, 12345 Some City\",\n//         dsecription: \"This is the first meetup\"\n//     },\n//     {\n//         id: \"m2\",\n//         title: \"A second meetup\",\n//         image: \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\n//         address: \"Some address 5, 123456789-047574365348 Some City\",\n//         dsecription: \"This is the second meetup\"\n//     }\n// ];\n\nfunction HomePage(props) {\n  //const [loadedMeetups, setLoadedMeetups] = useState([]);\n  // useEffect(() => {\n  //     //send http request\n  //     setLoadedMeetups(DUMMY_MEETUPS);\n  // },[]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"React Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"Browse a huge list of highly active React meetups!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n} // export async function getServerSideProps(context) {\n//     const req = context.req;\n//     const res = context.res;\n//     //will not run during build, but always on the server after deployment\n//     return {\n//         props: {\n//             meetups: DUMMY_MEETUPS\n//         }\n//     }\n// }\n\n\nexport async function getStaticProps() {\n  const client = await MongoClient.connect(\"mongodb+srv://siddhanth:12345@cluster0.n1ehjhy.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray();\n  client.close(); // const req = context.req;\n  // const res = context.res;\n  //always on the server, never on the client\n\n  return {\n    props: {\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        id: meetup._id.toString()\n      }))\n    },\n    revalidate: 1\n  };\n}\nexport default HomePage; //useEffect works such a way that it executes after the component function executes\n//the array will be empty and then the useEffect executs which then sets the array\n//which then rerenders the component\n//why?\n//if it fetched from backend, users might see a loadingSPinner which may not be the\n//UI exp we wanted. Here the component is rendered twice which impacts the performance\n//nextJs does not wait for the data to be fetched to then return the\n//fully rendered page. It returns the first compoennt render cycle which could be\n//an empty page.\n//PAGE PRE-RENDERING","map":{"version":3,"sources":["/Users/siddhanth/Desktop/Development/React projects/React topic demos/NextJS/nextjs-project/pages/index.js"],"names":["MeetupList","MongoClient","Head","React","HomePage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","close","map","meetup","title","address","image","id","_id","toString","revalidate"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,kCAAvB;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB;AACA;AACA;AACA;AACA;AAEA,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,aADP;AAEE,QAAA,OAAO,EAAC;AAFV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,C,CAED;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMP,WAAW,CAACQ,OAAZ,CACnB,gGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB;AAEAN,EAAAA,MAAM,CAACO,KAAP,GAVqC,CAWrC;AACA;AAEA;;AACA,SAAO;AACLV,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAaC,MAAD,KAAa;AAChCC,QAAAA,KAAK,EAAED,MAAM,CAACC,KADkB;AAEhCC,QAAAA,OAAO,EAAEF,MAAM,CAACE,OAFgB;AAGhCC,QAAAA,KAAK,EAAEH,MAAM,CAACG,KAHkB;AAIhCC,QAAAA,EAAE,EAAEJ,MAAM,CAACK,GAAP,CAAWC,QAAX;AAJ4B,OAAb,CAAZ;AADJ,KADF;AASLC,IAAAA,UAAU,EAAE;AATP,GAAP;AAWD;AAED,eAAepB,QAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["import MeetupList from \"../components/meetups/MeetupList\";\nimport { MongoClient } from \"mongodb\";\nimport Head from \"next/head\";\nimport React from \"react\";\n\n// const DUMMY_MEETUPS = [\n//     {\n//         id: \"m1\",\n//         title: \"A first meetup\",\n//         image: \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\n//         address: \"Some address 5, 12345 Some City\",\n//         dsecription: \"This is the first meetup\"\n//     },\n//     {\n//         id: \"m2\",\n//         title: \"A second meetup\",\n//         image: \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\n//         address: \"Some address 5, 123456789-047574365348 Some City\",\n//         dsecription: \"This is the second meetup\"\n//     }\n// ];\n\nfunction HomePage(props) {\n  //const [loadedMeetups, setLoadedMeetups] = useState([]);\n  // useEffect(() => {\n  //     //send http request\n  //     setLoadedMeetups(DUMMY_MEETUPS);\n  // },[]);\n\n  return (\n    <div>\n      <Head>\n        <title>React Meetups</title>\n        <meta\n          name=\"description\"\n          content=\"Browse a huge list of highly active React meetups!\"\n        />\n      </Head>\n      <MeetupList meetups={props.meetups} />\n    </div>\n  );\n}\n\n// export async function getServerSideProps(context) {\n//     const req = context.req;\n//     const res = context.res;\n\n//     //will not run during build, but always on the server after deployment\n//     return {\n//         props: {\n//             meetups: DUMMY_MEETUPS\n//         }\n//     }\n// }\n\nexport async function getStaticProps() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://siddhanth:12345@cluster0.n1ehjhy.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const meetups = await meetupsCollection.find().toArray();\n\n  client.close();\n  // const req = context.req;\n  // const res = context.res;\n\n  //always on the server, never on the client\n  return {\n    props: {\n      meetups: meetups.map((meetup) => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        id: meetup._id.toString(),\n      })),\n    },\n    revalidate: 1,\n  };\n}\n\nexport default HomePage;\n\n//useEffect works such a way that it executes after the component function executes\n//the array will be empty and then the useEffect executs which then sets the array\n//which then rerenders the component\n\n//why?\n//if it fetched from backend, users might see a loadingSPinner which may not be the\n//UI exp we wanted. Here the component is rendered twice which impacts the performance\n\n//nextJs does not wait for the data to be fetched to then return the\n//fully rendered page. It returns the first compoennt render cycle which could be\n//an empty page.\n\n//PAGE PRE-RENDERING\n"]},"metadata":{},"sourceType":"module"}