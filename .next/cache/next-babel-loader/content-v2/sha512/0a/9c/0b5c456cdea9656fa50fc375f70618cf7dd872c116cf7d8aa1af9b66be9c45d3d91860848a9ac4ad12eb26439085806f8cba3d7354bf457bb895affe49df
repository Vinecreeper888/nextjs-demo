{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nconst DUMMY_MEETUPS = [{\n  id: \"m1\",\n  title: \"A first meetup\",\n  image: \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\n  address: \"Some address 5, 12345 Some City\",\n  dsecription: \"This is the first meetup\"\n}, {\n  id: \"m2\",\n  title: \"A second meetup\",\n  image: \"https://upload.wikimedia.org/wikipedia/commons/d/d3/Stadtbild_M%C3%BCnchen.jpg\",\n  address: \"Some address 5, 123456789-047574365348 Some City\",\n  dsecription: \"This is the second meetup\"\n}];\n\nfunction HomePage(props) {\n  //const [loadedMeetups, setLoadedMeetups] = useState([]);\n  // useEffect(() => {\n  //     //send http request\n  //     setLoadedMeetups(DUMMY_MEETUPS);\n  // },[]);\n  return /*#__PURE__*/_jsx(MeetupList, {\n    meetups: props.meetups\n  });\n}\n\nexport async function getStaticProps() {\n  //fetch data from api\n  //fetch data from file system\n  //after operaiton, always return a object\n  return {\n    props: {\n      meetups: DUMMY_MEETUPS\n    }\n  };\n}\nexport default HomePage; //useEffect works such a way that it executes after the component function executes\n//the array will be empty and then the useEffect executs which then sets the array\n//which then rerenders the component\n//why?\n//if it fetched from backend, users might see a loadingSPinner which may not be the\n//UI exp we wanted. Here the component is rendered twice which impacts the performance\n//nextJs does not wait for the data to be fetched to then return the\n//fully rendered page. It returns the first compoennt render cycle which could be \n//an empty page.\n//PAGE PRE-RENDERING","map":null,"metadata":{},"sourceType":"module"}